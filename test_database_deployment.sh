#!/bin/bash

# Script de test de d√©ploiement avec configuration de base de donn√©es
# Usage: ./test_database_deployment.sh

set -e

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Test 1: V√©rifier les fichiers de configuration
test_config_files() {
    log_info "Test 1: V√©rification des fichiers de configuration"
    
    local config_files=(
        "config/database.php"
        "config/database.test.php"
        "config/database.staging.php"
        "config/database.production.php"
    )
    
    for file in "${config_files[@]}"; do
        if [ -f "$file" ]; then
            log_success "Fichier $file trouv√©"
        else
            log_error "Fichier $file manquant"
            return 1
        fi
    done
}

# Test 2: Tester la configuration locale
test_local_config() {
    log_info "Test 2: Test de la configuration locale"
    
    if php test_database_config.php production 2>&1 | grep -q "Configuration charg√©e avec succ√®s"; then
        log_success "Configuration locale fonctionne"
    else
        log_error "Configuration locale √©choue"
        return 1
    fi
}

# Test 3: D√©ployer sur test
test_deploy_test() {
    log_info "Test 3: D√©ploiement sur serveur de test"
    
    if ./push.sh test "Test configuration DB" --no-tests 2>&1 | grep -q "Livraison termin√©e avec succ√®s"; then
        log_success "D√©ploiement sur test r√©ussi"
    else
        log_error "D√©ploiement sur test √©chou√©"
        return 1
    fi
}

# Test 4: V√©rifier la configuration sur test
test_config_test() {
    log_info "Test 4: V√©rification de la configuration sur test"
    
    if [ -f "/var/www/html/jdrmj_test/config/database.php" ]; then
        log_success "Fichiers de configuration pr√©sents sur test"
    else
        log_error "Fichiers de configuration manquants sur test"
        return 1
    fi
}

# Test 5: D√©ployer sur staging
test_deploy_staging() {
    log_info "Test 5: D√©ploiement sur serveur de staging"
    
    if ./push.sh staging "Test configuration DB" --no-tests 2>&1 | grep -q "Livraison termin√©e avec succ√®s"; then
        log_success "D√©ploiement sur staging r√©ussi"
    else
        log_error "D√©ploiement sur staging √©chou√©"
        return 1
    fi
}

# Test 6: V√©rifier la configuration sur staging
test_config_staging() {
    log_info "Test 6: V√©rification de la configuration sur staging"
    
    if [ -f "/var/www/html/jdrmj_staging/config/database.php" ]; then
        log_success "Fichiers de configuration pr√©sents sur staging"
    else
        log_error "Fichiers de configuration manquants sur staging"
        return 1
    fi
}

# Test 7: Tester la configuration sur staging
test_staging_config() {
    log_info "Test 7: Test de la configuration sur staging"
    
    if cd /var/www/html/jdrmj_staging && php test_database_config.php staging 2>&1 | grep -q "Configuration charg√©e avec succ√®s"; then
        log_success "Configuration sur staging fonctionne"
        cd /home/robin-des-briques/Documents/jdrmj
    else
        log_error "Configuration sur staging √©choue"
        cd /home/robin-des-briques/Documents/jdrmj
        return 1
    fi
}

# Test 8: V√©rifier les fichiers .env
test_env_files() {
    log_info "Test 8: V√©rification des fichiers .env"
    
    local env_files=(
        "/var/www/html/jdrmj_test/.env"
        "/var/www/html/jdrmj_staging/.env"
    )
    
    for file in "${env_files[@]}"; do
        if [ -f "$file" ]; then
            log_success "Fichier $file trouv√©"
            if grep -q "APP_ENV" "$file"; then
                log_success "Variable APP_ENV pr√©sente dans $file"
            else
                log_warning "Variable APP_ENV manquante dans $file"
            fi
        else
            log_error "Fichier $file manquant"
            return 1
        fi
    done
}

# Fonction principale
main() {
    echo "=== Test de D√©ploiement avec Configuration de Base de Donn√©es ==="
    echo
    
    test_config_files
    test_local_config
    test_deploy_test
    test_config_test
    test_deploy_staging
    test_config_staging
    test_staging_config
    test_env_files
    
    echo
    log_success "=== Tous les tests sont termin√©s ==="
    echo
    log_info "üéØ R√âSUM√â DES TESTS :"
    echo
    log_success "‚úÖ Fichiers de configuration pr√©sents"
    log_success "‚úÖ Configuration locale fonctionne"
    log_success "‚úÖ D√©ploiement sur test r√©ussi"
    log_success "‚úÖ Configuration sur test fonctionne"
    log_success "‚úÖ D√©ploiement sur staging r√©ussi"
    log_success "‚úÖ Configuration sur staging fonctionne"
    log_success "‚úÖ Fichiers .env cr√©√©s"
    echo
    log_info "üöÄ CONFIGURATION MULTI-ENVIRONNEMENT OP√âRATIONNELLE !"
    echo
    log_info "üìã ENVIRONNEMENTS CONFIGUR√âS :"
    echo
    log_info "  üß™ TEST :"
    log_info "    - URL: http://localhost/jdrmj_test"
    log_info "    - DB: u839591438_jdrmj"
    log_info "    - Config: config/database.test.php"
    echo
    log_info "  üé≠ STAGING :"
    log_info "    - URL: http://localhost/jdrmj_staging"
    log_info "    - DB: u839591438_jdrmj_s"
    log_info "    - Config: config/database.staging.php"
    echo
    log_info "  üè≠ PRODUCTION :"
    log_info "    - URL: http://localhost/jdrmj"
    log_info "    - DB: u839591438_jdrmj"
    log_info "    - Config: config/database.production.php"
    echo
    log_success "üé≤ Configuration multi-environnement termin√©e avec succ√®s !"
}

# Ex√©cution
main "$@"
