#!/usr/bin/env python3
"""
D√©monstration du syst√®me de capture d'√©tapes de tests
Ce script montre comment utiliser le capteur d'√©tapes et g√©n√®re un rapport JSON
"""

import time
import json
from test_steps_capturer import (
    start_test, end_test, add_action, add_assertion, add_info, 
    add_error, add_warning, step_context, export_test_steps
)
from json_test_reporter import JSONTestReporter

def demo_test_with_steps():
    """D√©monstration d'un test avec capture d'√©tapes"""
    
    print("üé≤ D√©monstration du syst√®me de capture d'√©tapes de tests")
    print("=" * 60)
    
    # D√©marrer le test
    start_test("demo_test_with_steps", "Test de d√©monstration du syst√®me de capture d'√©tapes")
    
    # √âtape 1: Initialisation
    with step_context("Initialisation", "Pr√©paration de l'environnement de test"):
        add_info("Environnement", "Environnement de test initialis√©")
        add_action("Configuration", "Configuration des param√®tres de test")
        time.sleep(0.1)  # Simuler une action
    
    # √âtape 2: Connexion
    with step_context("Connexion", "Processus de connexion √† l'application"):
        add_action("Navigation", "Navigation vers la page de connexion")
        add_action("Saisie identifiants", "Saisie du nom d'utilisateur et mot de passe")
        add_assertion("Connexion r√©ussie", "V√©rification de la connexion", 
                     expected="connect√©", actual="connect√©", passed=True)
        time.sleep(0.2)
    
    # √âtape 3: Navigation
    with step_context("Navigation", "Navigation dans l'application"):
        add_action("Acc√®s tableau de bord", "Acc√®s au tableau de bord principal")
        add_action("S√©lection menu", "S√©lection d'un √©l√©ment du menu")
        add_info("Page charg√©e", "Page de destination charg√©e avec succ√®s")
        time.sleep(0.15)
    
    # √âtape 4: Test de fonctionnalit√©
    with step_context("Test fonctionnalit√©", "Test d'une fonctionnalit√© sp√©cifique"):
        add_action("Cr√©ation √©l√©ment", "Cr√©ation d'un nouvel √©l√©ment")
        add_assertion("√âl√©ment cr√©√©", "V√©rification de la cr√©ation", 
                     expected="cr√©√©", actual="cr√©√©", passed=True)
        add_action("Modification", "Modification de l'√©l√©ment cr√©√©")
        add_assertion("Modification r√©ussie", "V√©rification de la modification", 
                     expected="modifi√©", actual="modifi√©", passed=True)
        time.sleep(0.3)
    
    # √âtape 5: Test d'erreur (simul√©)
    with step_context("Test d'erreur", "Test de gestion d'erreur"):
        add_action("Action invalide", "Tentative d'action invalide")
        add_error("Erreur simul√©e", "Erreur de test simul√©e pour d√©monstration", 
                 {"error_code": "TEST_ERROR", "details": "Ceci est une erreur simul√©e"})
        time.sleep(0.1)
    
    # √âtape 6: Nettoyage
    with step_context("Nettoyage", "Nettoyage des donn√©es de test"):
        add_action("Suppression", "Suppression des √©l√©ments de test cr√©√©s")
        add_assertion("Nettoyage r√©ussi", "V√©rification du nettoyage", 
                     expected="nettoy√©", actual="nettoy√©", passed=True)
        add_info("Test termin√©", "Test de d√©monstration termin√© avec succ√®s")
        time.sleep(0.1)
    
    # Terminer le test
    end_test("completed")
    
    # Exporter les √©tapes
    test_steps_data = export_test_steps()
    
    print(f"‚úÖ Test termin√© avec {len(test_steps_data['steps'])} √©tapes captur√©es")
    print(f"üìä R√©sum√©: {test_steps_data['summary']}")
    
    return test_steps_data

def create_json_report(test_steps_data):
    """Cr√©e un rapport JSON avec les √©tapes captur√©es"""
    
    print("\nüìÑ Cr√©ation du rapport JSON...")
    
    # Cr√©er le reporter
    reporter = JSONTestReporter("tests/reports")
    
    # Calculer les temps
    start_time = time.time() - 2  # Simulation
    end_time = time.time()
    
    # Cr√©er le rapport
    report_path = reporter.create_test_report(
        test_name="demo_test_with_steps",
        test_file="tests/test_steps_demo.py",
        status="PASSED",
        start_time=start_time,
        end_time=end_time,
        error_message="",
        category="D√©monstration",
        priority="Basse",
        test_steps=test_steps_data['steps']
    )
    
    if report_path:
        print(f"‚úÖ Rapport JSON cr√©√©: {report_path}")
        
        # Afficher un aper√ßu du rapport
        with open(report_path, 'r', encoding='utf-8') as f:
            report_data = json.load(f)
        
        print(f"\nüìã Aper√ßu du rapport:")
        print(f"  - Nom: {report_data['test_info']['name']}")
        print(f"  - Statut: {report_data['result']['status']}")
        print(f"  - Dur√©e: {report_data['test_info']['duration_seconds']:.2f}s")
        print(f"  - √âtapes: {len(report_data['test_steps'])}")
        
        return report_path
    else:
        print("‚ùå Erreur lors de la cr√©ation du rapport")
        return None

def display_steps_summary(test_steps_data):
    """Affiche un r√©sum√© des √©tapes captur√©es"""
    
    print(f"\nüìù R√©sum√© des √©tapes captur√©es:")
    print("-" * 40)
    
    for i, step in enumerate(test_steps_data['steps'], 1):
        step_type = step['type']
        duration = step['duration_seconds']
        name = step['name']
        description = step['description']
        
        # Ic√¥ne selon le type
        icons = {
            'action': '‚ñ∂Ô∏è',
            'assertion': '‚úÖ',
            'info': '‚ÑπÔ∏è',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'screenshot': 'üì∑'
        }
        
        icon = icons.get(step_type, 'üîπ')
        
        print(f"{i:2d}. {icon} {name}")
        print(f"    {description}")
        print(f"    Type: {step_type} | Dur√©e: {duration:.3f}s")
        
        if step.get('details'):
            print(f"    D√©tails: {step['details']}")
        
        print()

def main():
    """Fonction principale de d√©monstration"""
    
    try:
        # Ex√©cuter le test de d√©monstration
        test_steps_data = demo_test_with_steps()
        
        # Afficher le r√©sum√©
        display_steps_summary(test_steps_data)
        
        # Cr√©er le rapport JSON
        report_path = create_json_report(test_steps_data)
        
        if report_path:
            print(f"\nüéâ D√©monstration termin√©e avec succ√®s!")
            print(f"üìÅ Rapport disponible dans: {report_path}")
            print(f"üåê Consultez admin_versions.php pour voir les d√©tails dans l'interface web")
        else:
            print(f"\n‚ö†Ô∏è D√©monstration termin√©e avec des erreurs")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

